---
layout: post
title: 'Junior to Mid Level'
categories: programming
permalink: /junior-to-midlevel
---


These past few months were quite a cathartic tail wind for me. In August, I started my senior semester in my CS bachelors program. I had an exciting set of classes for this last semester. I was finally taking data structures and algorithms. And I was also approved to take software engineering. Prior to taking these classes, I was mystified by data structures and algorithms. I was also mystified by the lower level details of software engineering. 
In my mind, this learning was going to be the thing that was going to change the course of my career. I had also landed a contract to hire opportunity at a rising new health tech start up called [Summer Health](https://www.summerhealth.com/){:target="_blank"}{:rel="noopener noreferrer"}.

I was going to start learning a brand new everything. I began the semester, exceedingly excited however about the Software Engineering class. I had wrote to the dean of my college about getting approved to take this course and was wildly excited that I could finally learn how to refactor and code review like all of the kick ass engineers I've worked with over the years. TLDR, I never made it to the end of the class because I had to drop it. The course focused on Software Engineering as it pertains to organizing your work from an organizational level (Literally, what happens on Mondays, whats Agile vs Waterfall, my colleague in the past said X) and was too high-level on low level details. In my mind, I was gaining this information by simply going to work. It was a good class in terms of the textbook I had, but class wise it was more useful to the students without my experience. 
 

Data Structures and Algorithms, this was 'THE' class for me. As you all may know, up until the point I had decided to go back to college for a degree in Computer Science, I had been largely self taught. Outside of programming language syntax and WAF (web application framework) specifics, I had no knowledge of advanced data abstraction techniques and the benefits they bring in terms of processing. So I was extremely excited about this class as well. I learned that data organization leads to processing efficiency. I was left with a feeling that algorithms design is an art and it was quite beautiful. Dr. Brian Murphy made a point, to stomp in to my brain that if you need to keep track of the order of your data, then a stack is far more useful than a list. I say list and not array because I want to denote that we are taking advantage of dynamic memory allocation, as opposed to the constraints of an array. I learned memory manipulation with linked lists. I learned graphs, trees, bsts and algorithms on them, such as Djikstras, HeapSort, DSF, BSF and the performance of insertions, deletions and searches across the different data structures. I ended this course with an A-. I was super happy because I proved to myself, I can know how to write algorithms. The class prepped me very well to get beat up on Leetcode, lol.

The largest lessons for me actually came from the work I was doing. I had been given the opportunity to prove myself and step into a role as a mid level engineer at a startup.  The work was using Typescript across the stack. I have experience with statically typed languages - Java, through school and so I was ready to rock and roll. The plan was that I would take on predefined tasks that would outline the kind of work that I would do if made an offer and then just do them. At some point when the pedal hits the metal (3 months in), I’d become more autonomous and then I'd define the scope of most of my own work. I FAILED. 

There were a lot of things I did wrong. One such thing was that I had a tendency to work in a silo. Meaning I'd have a problem and stick with it for too long before reaching out for assistance. Thats a big issue because I was told on more than a few occassions that I needed to reach out after 30 mins of not being able to solve an issue. I was also half solving issues. There was a situation when I needed to patch a picture endpoint to display a practitioners photo on their profile but I only updated code that modified an S3 bucket with the picture but not the part where the picture was being pulled down. I also didn't lean on chat gpt and other code assisting tools as much. The friction in my on ramp was just too great. Regrettably I failed. 


What I witnessed however in this position was absolutely what I needed to see. For one, I learned keeping good relationships with management is really key when it comes to career growth. My team was made up of Staff level engineers - I had not been on a team like that before. Amazingly because I was contracting with the intention to become a part of their team, they made a point to source all of the more complicated tasks to me. These folks had greater than a decades worth of experience each and thought of using technology, picking technology, organizing teams and problem solving in ways I have not encountered before. 

I learned  many lessons, here is a few: create mental models to debug from. Everybody had a very nuanced understanding of the finer details of the different technologies we were using, so thinking around solving issues was kind of streamlined - because if you already know what to expect when you face an issue, you can reliably see where maybe things can fail. I learned software patterns are the best way to organize and decouple code in predicatable ways, leading to greater maintainability in the long run. The code base was beautiful. I learned decoupled code leads to easier to test code. It was the first time I was introduced to logging as not just a side bar but a mission critical component in adding observability. There was an on call rotation for the production engineers that required telemetry on all features that a customer would interface with. While testing can expose bugs before deploying to production, telemetry exposes potential logic bugs that testing can't catch. I learned to pay deep attention to the nuance of the totality of a systems operation. I learned to draw UML sequence diagrams and UML system designs to aide in solving problems. It was the first time I was exposed to thinking of tradeoffs when picking technologys to solve a business problem. I picked up more detailed lower level lessons as well, and read a few books in my time there.  

It was a whirlwind experience for me to see how engineering for excellence is achieved. I have no classes this semester and I’m four courses away from graduating, but my big goal, post all of this experience is to simply develop more. I think a key realization for me after having taken these courses and learning this much at work is, school and work is quite different but tangentially similar in that they both refine problem modeling and solving skills. I also know, now that my real goal is not to become a senior engineer, but to level up to a mid level engineer first. To learn how to choose solutions to problems on my own and pick out some trade offs between approaches and gain a teams buy in. I am going to try to look for junior level roles going forward and then I will seek to partner up with management and seniors in the organization I land in, in order to identify those challenges that I can tackle to further take my career to the next level. Till then, I'm just going to keep focusing on developing projects and exploring different technologies.

LESSONS ON LESSONS ON LESSONS. 


